Controls = function( object, domElement ){
	this.object = object;
	this.domElement = ( domElement !== undefined ) ? domElement : document;
	
	this.moveLeft = false;
	this.moveRight = false;
	this.moveUp = false;
	this.moveUp = false;
	this.moveDown = false;
	this.key1 = false;	//1: default camera; 2: camera on player;
	this.key2 = false;
	this.lightToggle = false;
	this.pause = false;
	
	this.movementSpeed = 50.0;
	
	
	this.onKeyDown = function ( event ) {
		
		switch( event.keyCode ) {
			
			case 38: /*up*/ this.moveUp = true; break;
			
			case 37: /*left*/ this.moveLeft = true; break;
			
			case 39: /*right*/ this.moveRight = true; break;
			
			case 40: /*down*/ this.moveDown = true; break;
			
			case 49: /*1*/ this.key1 = true; break;
			
			case 50: /*2*/ this.key2 = true; break;
			
			case 76: /*L*/ this.lightToggle = !(this.lightToggle); break;
			
			case 80: /*P*/ this.pause = !(this.pause); break;
			
		}
		
	};
	
	this.onKeyUp = function ( event ) {
		
		switch( event.keyCode ) {
			
			case 38: /*up*/ this.moveUp = false; break;
			
			case 37: /*left*/ this.moveLeft = false; break;
			
			case 39: /*right*/ this.moveRight = false; break;
			
			case 40: /*down*/ this.moveDown = false; break;
			
			case 49: /*1*/ this.key1 = false; break;
			
			case 50: /*2*/ this.key2 = false; break;
			
			//case 76: /*L*/ this.lightToggle = !(this.lightToggle); break;
			
		}
		
	};
	
	this.update = function(delta){
		var actualMoveSpeed = delta * this.movementSpeed;
		if (!paused){
			if ( this.moveLeft ) {
				this.object.translateX(-actualMoveSpeed);
				if (checkWallCollision(this.object.position, 'left')) {
					this.object.translateX(actualMoveSpeed);
				}
			}
			if ( this.moveRight ) {
				this.object.translateX(actualMoveSpeed);
				if (checkWallCollision(this.object.position, 'right')) {
					this.object.translateX(-actualMoveSpeed);
				}
			}
			if ( this.moveUp ) {
				this.object.translateY(actualMoveSpeed);
				if (checkWallCollision(this.object.position, 'up')) {
					this.object.translateY(-actualMoveSpeed);
				}
			}
			if ( this.moveDown ) {
				this.object.translateY(-actualMoveSpeed);
				if (checkWallCollision(this.object.position, 'down')) {
					this.object.translateY(actualMoveSpeed);
				}
			}
			
			if (this.key1){
				if (camOnPlayer){
					camera.position.x = defaultCameraPosition[0];
					camera.position.y = defaultCameraPosition[1];
					camera.position.z = defaultCameraPosition[2];
					
					camera.lookAt(bg.position.x, bg.position.y, bg.position.z);
					camOnPlayer = !camOnPlayer;
				}
			}
			if (this.key2){
				if (!camOnPlayer){
					camera.position.x = player.position.x;
					camera.position.y = player.position.y;
					camera.position.z = player.position.z + 500;
					camera.lookAt(player.position.x, player.position.y, player.position.z);
					camOnPlayer = !camOnPlayer;
				}
				
			}
			if (this.lightToggle){
				if (!lightOn){
					scene.add(light);
					lightOn = true;
				}
			}else{
				if (lightOn){
					scene.remove(light);
					lightOn = false;
				}
			}
		}
		if (this.pause){
			paused = true;
		}else{
			paused = false;
		}
		
	};
	
	this.domElement.addEventListener( 'contextmenu', function ( event ) { event.preventDefault(); }, false );
	
	this.domElement.addEventListener( 'keydown', bind( this, this.onKeyDown ), false );
	this.domElement.addEventListener( 'keyup', bind( this, this.onKeyUp ), false );
	
	function bind( scope, fn ) {
		
		return function () {
			
			fn.apply( scope, arguments );
			
		};
		
	};
};